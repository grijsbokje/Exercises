1. import the restaurant information from restaurants.json

	mongoimport -d restaurant restaurants.json

2. Display the fiels restaurant_id, name, borough and cuisine

	db.restaurants.find({},{"_id":0, "restaurant_id":1, "name":1, "cuisine":1, "borough":1})

3. Display the second group of 5 restaurants which are in the borough Bronx

	db.restaurants.find({"borough":"Bronx"}).limit(5).skip(5)

4. Find the restaurants who achieved a score more than 90

	db.restaurants.find({"grades.score":{$gt:90}})

5. Find the restaurants that do not prepare any cuisine of "American" and their grade score more than 70 and latitude less than -65.754168

	db.restaurants.find({"cuisine":{$ne: "American"}, "grades.score":{$gt:70}, "address.coord.0":{$lt: -65.754168}})

6. Find the restaurants which belong to the borough Bronx and prepared either American or Chinese dish

	db.restaurants.find({"borough":"Bronx", "cuisine":{$in:["American", "Chinese"]}})

7. Find the restaurant Id, name, borough and cuisine for those restaurants which are not beloning to the borough Staten Island or Queens of Bronxor Brooklyn

	db.restaurants.find({"borough":{$nin:["Staten Island", "Queens", "Bronx", "Brooklyn"]}},{"_id":0, "restaurant_id":1, "name":1, "borough":1, "cuisine":1})

8. Find the restaurant id name, borough and cuisine for those restaurants which achieved a score which is not more than 10

	db.restaurants.find({"grades.score":{$lte:10}},{"_id":0, "restaurant_id":1, "name":1, "borough":1, "cuisine":1})

9. Find the restaurant id, name and grades for those restaurants which achieved a grade of "A" and scored 11 on an ISODate "2014-08-11T00:00:00Z" among many of survey dates

	db.restaurants.find({grades:{$elemMatch:{grade:"A", score:11, date:ISODate("2014-08-11T00:00:00Z")}}},{"_id":0, "restaurant_id":1, "name":1, "grades.$":1})

10. Give a list of all restaurants, ordered by cuisine alphabetically and borough in reverse alphabetical order

	db.restaurants.find({}).sort({cuisine:1 , borough:-1})

11. Write a query to know whether all the addresses contain a street or not
	
	db.restaurants.find({"address.street":{$exists:0}})
	
